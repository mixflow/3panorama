/*
 * A panorama viewer base on three.js.
 * Panarama is a type of image which can be watched in 360 degree horizonally and 180 degree vertically.
 *
 * @license Apache 2.0
 * @author MixFlow
 * @date 2017-08
 */
(function(){window.threePanorama=function(e){var n,t,i,r,a,o,s,d,c,u,h,l,m,g,w,E,f,v,R,p,T,M;o={container:document.body,image:void 0,fov:65,useWindowSize:!1,alternateRatio:16/9,enableDragNewImage:!0,mouseSensitivity:.1,lonlat:[0,0],sphere:{radius:500},debug:{imageLoadProgress:!1,lonlat:!1}},e=e||{};for(h in o)T=o[h],h in e||(e[h]=T);if(null==e.image)throw{type:"No image provided.",msg:"Please fill panorama image path(string) in the parameter 'image' of settings"};return r="string"==typeof e.container?document.querySelectorAll(e.container)[0]:e.container,m=e.lonlat[0],l=e.lonlat[1],M=0,d=0,(s=function(){var n;if(e.useWindowSize?M=window.innerWidth:(n=r.getBoundingClientRect(),M=n.width,d=n.height),!M&&!d)throw{type:"Lack of Viewer Size.",msg:"Viewer width and height are both missing(value is 0), Please check the container size(width and height > 0). Or use window size to set Viewer size by setting `useWindowSize` as `true`"};return d?M||(M=d*e.alternateRatio):d=M/e.alternateRatio,{width:M,height:d}})(),c=function(){var n,i,a,o,s,c,h;return n=new THREE.PerspectiveCamera(e.fov,M/d,1,1100),n.target=new THREE.Vector3(0,0,0),(i=new THREE.SphereBufferGeometry(e.sphere.radius,50,50)).scale(-1,1,1),h=(new THREE.TextureLoader).load(e.image),a=new THREE.MeshBasicMaterial({map:h}),o=new THREE.Mesh(i,a),(c=new THREE.Scene).add(o),s=u(),r.appendChild(s.domElement),t(s.domElement),window.addEventListener("resize",w,!1),{camera:n,mesh:o,scene:c,renderer:s}},u=function(){var e;return(e=new THREE.WebGLRenderer).setPixelRatio(window.devicePixelRatio),e.setSize(M,d),e},t=function(n){var t,i,r,a,o,s,d,c,u,h,g,w,E,f;return s=0,d=0,o=0,a=0,c=!1,r=function(e){return function(n){return n.preventDefault(),c=!0,s=e?n.changedTouches[0].clientX:n.clientX,d=e?n.changedTouches[0].clientY:n.clientY,o=m,a=l}},i=function(n){return function(t){var i,r,u;if(!0===c&&(r=n?t.changedTouches[0].clientX:t.clientX,u=n?t.changedTouches[0].clientY:t.clientY,i=e.mouseSensitivity,m=(s-r)*i+o,l=(u-d)*i+a,e.debug.lonlat))return console.log("longitude: ",m,"latitude: ",l)}},t=function(e){return c=!1},u=r(!1),h=i(!1),g=t,n.addEventListener("mousedown",u,!1),n.addEventListener("mousemove",h,!1),n.addEventListener("mouseup",g,!1),f=r(!0),E=i(!0),w=t,n.addEventListener("touchstart",f,!1),n.addEventListener("touchmove",E,!1),n.addEventListener("touchend",w,!1)},w=function(e){return s(),i.aspect=M/d,i.updateProjectionMatrix(),f.setSize(M,d)},E=c(),i=E.camera,g=E.mesh,v=E.scene,f=E.renderer,n=function(){requestAnimationFrame(n),R()},R=function(){return p(),f.render(v,i)},p=function(){var n,t,r,a,o,s;return l=Math.max(-85,Math.min(85,l)),n=THREE.Math.degToRad(90-l),r=THREE.Math.degToRad(m),t=e.sphere.radius,a=t*Math.sin(n)*Math.cos(r),o=t*Math.cos(n),s=t*Math.sin(n)*Math.sin(r),i.lookAt(new THREE.Vector3(a,o,s))},n(),a=e.debug,{container:r,camera:i,mesh:g,scene:v,renderer:f,debugSettings:a}}}).call(this);